{"is_source_file": true, "format": "Java", "description": "Service class for handling user authentication operations, including registration, login, and retrieving current user details.", "external_files": ["com/example/usermanagementbackend/dto/AuthResponse", "com/example/usermanagementbackend/dto/LoginRequest", "com/example/usermanagementbackend/dto/RegisterRequest", "com/example/usermanagementbackend/exception/BadRequestException", "com/example/usermanagementbackend/model/User", "com/example/usermanagementbackend/repository/UserRepository", "com/example/usermanagementbackend/security/CustomUserDetails", "com/example/usermanagementbackend/security/JwtTokenProvider", "org.springframework.security.authentication.AuthenticationManager", "org.springframework.security.authentication.UsernamePasswordAuthenticationToken", "org.springframework.security.core.Authentication", "org.springframework.security.core.context.SecurityContextHolder", "org.springframework.security.crypto.password.PasswordEncoder", "org.springframework.stereotype.Service", "org.springframework.transaction.annotation.Transactional"], "external_methods": ["userRepository.existsByEmail", "userRepository.save", "tokenProvider.generateToken", "authenticationManager.authenticate", "SecurityContextHolder.getContext().setAuthentication", "userRepository.findByEmail"], "published": ["register", "login", "getCurrentUser"], "classes": [{"name": "AuthService", "description": "Service layer for user authentication operations, integrating user repository, security, and JWT token creation."}], "methods": [{"name": "register", "description": "Registers a new user by saving user data and generating a JWT token."}, {"name": "login", "description": "Authenticates user credentials and returns a JWT token along with user details."}, {"name": "getCurrentUser", "description": "Retrieves the currently authenticated user based on security context."}], "calls": ["userRepository.existsByEmail", "userRepository.save", "tokenProvider.generateToken", "authenticationManager.authenticate", "SecurityContextHolder.getContext().setAuthentication", "userRepository.findByEmail"], "search-terms": ["AuthService", "register", "login", "JWT token", "AuthenticationManager", "SecurityContextHolder", "PasswordEncoder", "userRepository"], "state": 2, "file_id": 21, "knowledge_revision": 44, "git_revision": "", "hash": "6019ea254d6a70cd7226d897143e8f5e", "format-version": 4, "code-base-name": "user_management_backend", "filename": "user_management_backend/src/main/java/com/example/usermanagementbackend/service/AuthService.java", "revision_history": [{"44": ""}]}